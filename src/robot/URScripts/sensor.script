################################################################
## sensor.script
## Implements functions for interacting with the Robotiq FT 300 sensor
## The main entry points are ft_get() and ft_set_zero_async()
################################################################
def sensor():
    FT_IPADDRESS = "127.0.0.1"
    FT_PORT_CMD = 63350
    FT_PORT_READ = 63351
    FT_SOCKET_CMD = "ft_socket_cmd"
    FT_SOCKET_READ = "ft_socket_read"
    ft_last =[0,0,0,0,0,0]
    ft_reset_next = False

    socket_close(FT_SOCKET_CMD)
    socket_close(FT_SOCKET_READ)
    socket_open(FT_IPADDRESS,FT_PORT_CMD,FT_SOCKET_CMD)
    socket_open(FT_IPADDRESS,FT_PORT_READ,FT_SOCKET_READ)

    # gets the last reading
    def ft_get(critical_section_already_acquired = False):
        if critical_section_already_acquired:
            return ft_last
        end

        enter_critical 
        ft = ft_last
        exit_critical
        return ft
    end

    # sets the sensor to zero without spending the thread quota, by scheduling an ft_set_zero() on the background thread
    def ft_set_zero_async():
        ft_reset_next = True
    end

    def ft_set_zero():
        socket_send_string("SET ZRO",FT_SOCKET_CMD)
    end
    
    def ft_read():
        r = socket_read_ascii_float(6,FT_SOCKET_READ)
        if r[0] != 6:
            return [0,0,0,0,0,0]
        end
        #textmsg(r)
        return [r[1], r[2], r[3], r[4], r[5], r[6]]
    end

    def ft_turn_stream_off():
        socket_send_string("STREAM OFF",FT_SOCKET_CMD)
    end
    
    def ft_turn_stream_on():
        socket_send_string("STREAM ON",FT_SOCKET_CMD)
    end

    thread ft_read_fn():
        ft_turn_stream_off()
        ft_turn_stream_on()
        while True:
            ft = ft_read()
            enter_critical 
            ft_last = ft
            exit_critical
            if ft_reset_next:
                ft_set_zero()
                ft_reset_next = False
            end
        end
    end

    
    ft_read_thread = run ft_read_fn()

    def ft_debug():
        ft_set_zero()
        while True:
            ft = ft_read()
            textmsg("FT:", ft)
            sleep(0.5)
        end
    end

    def ft_print_serial_number():
        socket_send_string("GET SNU",FT_SOCKET_CMD)
        string_from_server = socket_read_string(FT_SOCKET_CMD)
        popup(string_from_server)
    end
  
    def ft_print_firmware_version():
        socket_send_string("GET FWV",FT_SOCKET_CMD)
        string_from_server = socket_read_string(FT_SOCKET_CMD)
        popup(string_from_server)
    end
  
    def ft_print_prod_year():
        socket_send_string("GET PYE",FT_SOCKET_CMD)
        string_from_server = socket_read_string(FT_SOCKET_CMD)
        popup(string_from_server)
    end
  
    def ft_get_version():
        socket_send_string("GET VER",FT_SOCKET_CMD)
        string_from_server = socket_read_string(FT_SOCKET_CMD)
        popup(string_from_server)
    end
    
    def ft_save_calib_context():
        socket_send_string("CALIB NEXT TOOL",FT_SOCKET_CMD)
    end

    
    def ft_get_sensor_state():
        socket_send_string("CURRENT STATE",FT_SOCKET_CMD)
        state = socket_read_string(FT_SOCKET_CMD)
        textmsg("Current FT state: ", state)
        return state
    end
end # sensor.script
